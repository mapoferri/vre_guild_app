# Dockerfile

#Conda image
FROM continuumio/miniconda3

#Define dependencies and Bash shell
ENV DEBIAN_FRONTEND noninteractive

#RUN apt-get -o Acquire::Check-Valid-Until=false -o Acquire::Check-Date=false update

RUN apt-get update -qq ; apt-get upgrade ; \
    apt-get install -y gridengine-client git ; \
    apt-get install -y build-essential tar curl ; \
    apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*


RUN chsh -s /bin/bash
SHELL ["/bin/bash", "-c"]
#RUN source venv/bin/activate
RUN pwd

#Install python
RUN apt clean

# install python 3.7.10 (or newer)
RUN apt update -qq && \
    apt install -y build-essential software-properties-common libigraph0-dev && \
    add-apt-repository -y ppa:deadsnakes/ppa && \
    apt install -y python3.7 python3.7-dev python3.7-distutils python3-pip && \
    apt clean && rm -rf /var/lib/apt/lists/*

# Register the version in alternatives (and set higher priority to 3.7)
#RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 1
#RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 2
RUN alias python=/usr/bin/python3
RUN echo 'alias python="python3"' >> ~/.bashrc
RUN echo "alias python=/usr/bin/python3.7" >> ~/.bash_profile

# Upgrade pip to latest version
#RUN curl -s https://bootstrap.pypa.io/get-pip.py -o get-pip.py && \
#    python3 get-pip.py --force-reinstall && \
#    rm get-pip.py
#RUN apt-get update
#RUN apt-get install -y git python3-pip python3-venv
#ARG DEBIAN_FRONTEND=noninteractive

#RUN apt install -y python3.8-venv
#RUN python3 -m venv venv

#Activate Conda 
#RUN source ~/anaconda3/etc/profile.d/conda.sh
RUN python3 --version

#Define VRE tool download 
WORKDIR /home
RUN git clone --branch main https://github.com/mapoferri/guild_app.git
RUN pwd
RUN cd /home/guild_app
WORKDIR /home/guild_app
RUN ls



RUN conda env create -f environment.yml 
#RUN echo "source activate $(head -1 environment.yml | cut -d' ' -f2)" > ~/.bashrc
#ENV PATH /opt/conda/envs/$(head -1 environment.yml | cut -d' ' -f2)/bin:$PATH

COPY disc4all-data/ /home/disc4all-data/
COPY datasets/ /home/datasets/
#RUN tar -xzvf datasets.tar.gz
RUN ls

#Instantiating the biobbs 

#RUN source venv/bin/activate  
#RUN pip3 install --upgrade wheel
#RUN pip3 install -r requirements.txt
#RUN pip install git+https://github.com/inab/openvre-tool-api.git
#RUN pip3 install git+https://github.com/inab/openvre-tool-api.git
#RUN pip3 install pyyaml  
#RUN pip3 install igraph==0.9.10

SHELL ["conda", "run", "-n", "myenv", "/bin/bash", "-c"]

CMD conda run -n biobb_guild ./VRE_RUNNER --config tests/basic/config.json --in_metadata tests/basic/in_metadata.json --out_metadata out_metadata.json --log_file VRE_RUNNER.log
#CMD pip3 install -q -r requirements.txt && ./VRE_RUNNER --config tests/basic/config.json --in_metadata tests/basic/in_metadata.json --out_metadata out_metadata.json --log_file VRE_RUNNER.log
#RUN ln -s /usr/bin/python3 /usr/bin/python
#ENV PYTHONPATH "${PYTHONPATH}:/vre_template_tool"
#

#ADD setup.sh /usr/local/bin/setup.sh
#RUN chmod +x /usr/local/bin/setup.sh
#
#USER 2002:2002
#ENTRYPOINT ["/opt/docker/bin/entrypoint.sh"]
#CMD sleep 45 && /usr/local/bin/setup.sh && echo "hostname ; date" | qsub -o /tmp/a.txt
#CMD ./VRE_RUNNER --config tests/basic/config.json --in_metadata tests/basic/in_metadata.json --out_metadata out_metadata.json --log_file VRE_RUNNER.log
